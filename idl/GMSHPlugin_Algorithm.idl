// Copyright (C) 2012-2015  ALNEOS
// Copyright (C) 2016-2023  EDF
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.alneos.com/ or email : contact@alneos.fr
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//
#ifndef _SMESH_GMSHALGORITHM_IDL_
#define _SMESH_GMSHALGORITHM_IDL_

#include "SALOME_Exception.idl"
#include "SMESH_Hypothesis.idl"
#include "GEOM_Gen.idl"

/*!
 * GMSHPlugin: interfaces to GMSH related hypotheses and algorithms
 */
module GMSHPlugin
{
  typedef sequence<string> string_array;

  /*!
   * GMSHPlugin_GMSH: interface of "Gmsh" algorithm
   */
  interface GMSHPlugin_GMSH : SMESH::SMESH_3D_Algo
  {
  };

   /*!
   * GMSHPlugin_GMSH_3D: interface of "Gmsh" algorithm
   */
  interface GMSHPlugin_GMSH_3D : SMESH::SMESH_3D_Algo
  {
  };

  /*!
   * GMSHPlugin_GMSH_2D: interface of "Gmsh_2D" algorithm
   */
  interface GMSHPlugin_GMSH_2D : SMESH::SMESH_2D_Algo
  {
  };

  /*!
   * GMSHPlugin_Hypothesis: interface of "GMSH parameters" hypothesis
   */
  interface GMSHPlugin_Hypothesis : SMESH::SMESH_Hypothesis
  {
    void Set2DAlgo(in long value);
    long Get2DAlgo();

    void Set3DAlgo(in long value);
    long Get3DAlgo();

    void SetRecomb2DAlgo(in long value);
    long GetRecomb2DAlgo();

    void SetRecombineAll(in boolean value);
    boolean GetRecombineAll();

    void SetSubdivAlgo(in long value);
    long GetSubdivAlgo();

    void SetRemeshAlgo(in long value);
    long GetRemeshAlgo();

    void SetRemeshPara(in long value);
    long GetRemeshPara();

    void SetSmouthSteps(in double value);
    double GetSmouthSteps();

    void SetSizeFactor(in double value);
    double GetSizeFactor();

    void SetMeshCurvatureSize(in double value);
    double GetMeshCurvatureSize();

    void SetMaxSize(in double value);
    double GetMaxSize();

    void SetMinSize(in double value);
    double GetMinSize();

    void SetSecondOrder(in boolean value);
    boolean GetSecondOrder();

    void SetUseIncomplElem(in boolean value);
    boolean GetUseIncomplElem();

    void SetIs2d(in boolean value);

    void SetVerbosityLevel(in long value);
    long GetVerbosityLevel();

    void SetCompoundOnShape(in GEOM::GEOM_Object GeomObj);
    void SetCompoundOnEntry(in string entry);
    void UnsetCompoundOnShape(in GEOM::GEOM_Object GeomObj);
    void UnsetCompoundOnEntry(in string entry);
    string_array GetCompoundOnEntries();

  };

  /*!
   * GMSHPlugin_Hypothesis_2D: interface of "GMSH 2D parameters" hypothesis
   */
  interface GMSHPlugin_Hypothesis_2D : GMSHPlugin_Hypothesis
  {
  };

};

#endif
